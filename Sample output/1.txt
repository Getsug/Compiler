1:  /* A program to perform Euclid's 
2:  Algorithm to compute gcd */
3:  
4:  int gcd (int u, int v)
	4:  reserved word: int
	4:  ID: gcd
	4:  (
	4:  reserved word: int
	4:  ID: u
	4:  ,
	4:  reserved word: int
	4:  ID: v
	4:  )
5:  {   if (v==0) return u;
	5:  {
	5:  reserved word: if
	5:  (
	5:  ID: v
	5:  ==
	5:  NUM: 0
	5:  )
	5:  reserved word: return
	5:  ID: u
	5:  ;
6:      else return gcd(v, u-u/v*v);
	6:  reserved word: else
	6:  reserved word: return
	6:  ID: gcd
	6:  (
	6:  ID: v
	6:  ,
	6:  ID: u
	6:  -
	6:  ID: u
	6:  /
	6:  ID: v
	6:  *
	6:  ID: v
	6:  )
	6:  ;
7:      /* u-u/v*v == u mod v */
8:  }
	8:  }
9:  
10:  void main(void)
	10:  reserved word: void
	10:  ID: main
	10:  (
	10:  reserved word: void
	10:  )
11:  {   int x; int y;
	11:  {
	11:  reserved word: int
	11:  ID: x
	11:  ;
	11:  reserved word: int
	11:  ID: y
	11:  ;
12:      x=input(); y=input();
	12:  ID: x
	12:  =
	12:  ID: input
	12:  (
	12:  )
	12:  ;
	12:  ID: y
	12:  =
	12:  ID: input
	12:  (
	12:  )
	12:  ;
13:      output(gcd(x,y));
	13:  ID: output
	13:  (
	13:  ID: gcd
	13:  (
	13:  ID: x
	13:  ,
	13:  ID: y
	13:  )
	13:  )
	13:  ;
14:  }
	14:  }
15:  
16:  EOF
